---
title: "Sitzung 3: Diktionäre"
author: "Valerie Hase & Luisa Kutlar"
date: "05.04.2024"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---
#Packages laden und Objekte erstellen
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#install.packages("RCurl")
#install.packages("quanteda")
#install.packages("tidyverse)
#install.packages("dplyr")
#install.packages("quanteda.textplots")
#install.packages("quanteda.textstats")
#install.packages("udpipe")

library("RCurl")
library("quanteda")
library("tidyverse")
library("dplyr")
library("quanteda.textplots")
library("quanteda.textstats")
library("udpipe")


```

```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#Daten laden
url <-  getURL("https://raw.githubusercontent.com/valeriehase/Salamanca-CSS-SummerSchool/main/Processing%20text%20and%20text%20as%20data/data_tvseries.csv")
daten_df <-  read.csv2(text = url)

#Tokens
stopwords("english")
daten_tokens <- daten_df$Description %>% 
  tokens(what = "word",
         remove_punct = TRUE, 
         remove_numbers = TRUE, 
         remove_url = TRUE, 
         remove_symbols = TRUE) %>% 
  tokens_tolower() %>% 
  tokens_remove(stopwords("english")) %>% 
  tokens_wordstem()

#dfm
daten_dfm <- daten_tokens %>% 
  dfm() %>% 
  dfm_trim( min_docfreq = 0.005, 
            max_docfreq = 0.99, 
            docfreq_type = "prop", 
            verbose = TRUE) 
```

# 7 Diktionäre
## 7.1 Off-the-shelf Diktionäre
Es gibt viele off-the-shelf Diktionäre. Der Einfachkeit halber nutzen wir hier zur Demonstation den `data_dictionary_LSD2015`aus dem quanteda Packet (Young & Soroka, 2012).
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
diktionär <- data_dictionary_LSD2015

diktionär %>% 
  head()

?data_dictionary_LSD2015
```

Nun wollen wir den Diktionär auf unsere Daten anwenden. Diese müssen dafür im dfm-Format sein. Mit der Funktion `dfm_lookup()` aus dem quanteda Packet wird für jeden Text, also in diesem Fall für jede TV Show, geschaut, wie viele Wörter aus den ersten zwei Spalten des Diktionärs vorkommen. Die Funktion `dfm_weight(scheme = "prop")`setzt die Anzahl der dictionary Wörter ins Verhältnis mit der Länge des Textes.  
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
sentiment_tvshows <-  daten_dfm %>% 
  dfm_weight(scheme = "prop") %>% 
  dfm_lookup(dictionary = data_dictionary_LSD2015[1:2])

sentiment_tvshows %>% 
  head()
```

Eine erste Auswertung kann dann beispielsweise so aussehen:
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#S4 Objekt in einen data frame umwandeln
sentiment_tvshows <- convert(sentiment_tvshows, to = "data.frame")

#Anzahl Texte, die mindestens ein negatives Wort haben
sentiment_tvshows %>% 
  filter(negative != 0) %>% 
  count()

#Negativität in Summe
sentiment_tvshows$negative %>% 
  sum()

#Durschnittlicher negativ-Wert bei negativen Texten
(sentiment_tvshows$negative %>% 
  sum())/(sentiment_tvshows %>% 
  filter(negative != 0) %>% 
  count())

#Negativster Text
sentiment_tvshows %>% 
  filter(negative != 0) %>% 
  arrange(desc(negative)) %>% 
  head()

daten_df[329,] %>% 
  select(Description) %>% 
  print()
```

## 7.2 Eigene Diktionäre 
Zum Teil kann es sinnvoller sein einen eigenen Diktionär zu nutzen. So eine Wortliste zu erstellen geht sehr einfach:
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
diktionär_crime <- dictionary(list(crime = c("crime", "police", "gun", "shot", "dead", "murder", "kill", "court", "suspect", "witness", "arrest", "officer", "verdict")))
```

Die Anwendung und Auswertung bleibt gleich:
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#Diktionär anwenden
crime_tvshows <-  daten_dfm %>% 
  dfm_weight(scheme = "prop") %>% 
  dfm_lookup(dictionary = diktionär_crime)

#S4 Objekt in einen data frame umwandeln 
crime_tvshows <- convert(crime_tvshows, to = "data.frame")

#Text, der am meisten dem Genre crime entspricht
crime_tvshows %>% 
  arrange(desc(crime)) %>% 
  head()

## FRAGE: wenn ich es in RStudio ausführe, dann hat text314 mit einem Wert von 0.333 am meisten crime Wörter. Bei der html Seite ist text314 aber nur auf Platz 3 und hat dort einen Wert von 0.250...

daten_df[314,] %>% 
  select(Description) %>% 
  print()

```