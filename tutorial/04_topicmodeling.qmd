---
title: "Sitzung 4: Topic Modeling"
author: "Valerie Hase & Luisa Kutlar"
date: "05.04.2024"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---
#Packages laden und Objekte erstellen
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#install.packages("RCurl")
#install.packages("quanteda")
#install.packages("tidyverse)
#install.packages("dplyr")
#install.packages("quanteda.textplots")
#install.packages("quanteda.textstats")
#install.packages("udpipe")
#install.packages("stm") #überall ergänzen
#install.packages("reshape2")

library("RCurl")
library("quanteda")
library("tidyverse")
library("dplyr")
library("quanteda.textplots")
library("quanteda.textstats")
library("udpipe")
library("stm")
library("reshape2")


```

```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#Daten laden
url <-  getURL("https://raw.githubusercontent.com/valeriehase/Salamanca-CSS-SummerSchool/main/Processing%20text%20and%20text%20as%20data/data_tvseries.csv")
daten_df <-  read.csv2(text = url)

#Tokens
stopwords("english")
daten_tokens <- daten_df$Description %>% 
  tokens(what = "word",
         remove_punct = TRUE, 
         remove_numbers = TRUE, 
         remove_url = TRUE, 
         remove_symbols = TRUE) %>% 
  tokens_tolower() %>% 
  tokens_remove(stopwords("english")) %>% 
  tokens_wordstem()

#dfm
daten_dfm <- daten_tokens %>% 
  dfm() %>% 
  dfm_trim( min_docfreq = 0.005, 
            max_docfreq = 0.99, 
            docfreq_type = "prop", 
            verbose = TRUE) 
```

# 8 Topic Modeling
Zunächst müssen wir unsere dfm in eine stm umwandeln, damit das stm Packet das Datenformat versteht. Das stm Packet brauchen wir um danach das topic model zu berechnen. 
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#dfm in stm umwandeln
daten_stm <- convert(daten_dfm, to = "stm")
```

Bevor das richtige model gerechnet wird, berechnen wir den statistical fit für unterschiedliche Ks. Beispielhaft einmal für K = 4 und für K = 6. Hierfür brauchen wir nun das stm Packet, dass wir davor laden. 
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
library(stm)
statistical_fit_46 <- searchK(daten_stm$documents, daten_stm$vocab, K = c(4,6), verbose = TRUE)
```

Um das Ergebnis von der Berechnung zu interpretieren ploten wir die Daten. 
```{r echo = TRUE, message = FALSE, warning = FALSE, error = FALSE}
#K = c(4,6)
# Graph
#plot <- data.frame("K" = c(4,6),
                   #"Coherence" = unlist(statistical_fit_46$results$semcoh),
                   #"Perplexity" = unlist(statistical_fit_46$results$heldout))

# Daten in das long-Format umwandeln
#plot <- melt(plot, id = c())

#Plot erstellen
#ggplot(plot, aes(K, value, color = variable)) +
 # geom_line(linewidth = 1.5, show.legend = FALSE) +
  #scale_x_continuous(breaks = c(4, 6)) +
  #facet_wrap(~ variable, scales = "free_y") +
  #labs(x = "Number of topics K",
   #    title = "Statistical fit of models with different K")
```
